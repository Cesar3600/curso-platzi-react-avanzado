
QUE SON HOOKS
react-hoos esta disponibles a apartir de la version 16.8.0

funciones que nos permiten acceder a casi todas las caracteristicas de react desde
componentes funcionales.

hooks principales:
* useState -> aÃ±ade un estado local en el componente.
* useEffect -> permite ejecutar una funcion cada vez que renderizemos nuestro componente.
* useContext -> nos permite acceder a la contextAPI para obtener valores que usaremos en
toda la aplicacion de forma global sin necesidad de pasarla por las props.

////////////////////////////////////////////////////////////////////////////
se importa el hook userState
import React, { useState } from 'react'

se crea la funcion Counter y se exporta, en este caso se exporta por defecto
export default function Counter(){

se crea una constante que es una variable con 2 valores : 
el primero se refiere al valor del estado
el segundo valor se refiere a una funcion que actualiza a la primera
el valor de useState es el valor inicial(0) de counter 
const [counter,setCounter] = useState(0)

en el evento onClick se evalua la funcion anonima que manipula el valor counter agregandome
un numero mas 

--------------------- -------------------------------------------------------


import React, { useState } from 'react

export default function Counter(){
  const [counter,setCounter] = useState(0)
  return(
    <div>
      <span>{counter}</span>
      <button onClick = {() => setCounter(counter + 1)}> + </button>
      <button onClick = {() => setCounter(counter - 1)}> - </button>
    </div>
  )
}



////////////////////////////////////////////////////////////////////////////


import React, { Component } from 'react'

class Counter extends Component{
  constructor(){
    super();
    this.state = {
      counter : 0
    }
  }
  render(){
    const {counter} = this.state
    return(
      <>
        <span>{counter}<span>
        <button onClick = { () => this.setState({counter: counter + 1}) }> + </button>
        <button onClick = { () => this.setState({counter: counter - 1}) }> - </button>
      </>
    )
  }
}

/////////////////////////////////////////////////////////////////////////////

HOOKS AUXILIARES

useReducer
useCallback
useMemo
useRef
useImperativeHandle
useLayoutEffect
useDebugValue

puedes crear tu propio custom hook


+ventajas

100% compatibles.
transpilacion con babel.
mejor performance.
















