17 USO DE POLYFILL DE INTERSECTION OBSERVER E IMPORTS DINAMICOS


No todos los nabegadores soportan intersection observer por ello
nos piden que instalemos un polyfill

npm install intersection-observer 

vamos a usar la dependencia polyfill dentro de la funcion useEffect
por que es alli donde estamos pensando que estamos soportando intersection observer
y no es correcto


podriamos importar la dependencia y colocarlo arriba pero eso implicaria que siempre
se tendria que llamar y eso no siempre es asi solo queremos que se necesite cuando 
se haga el hook

para eso utilizaremos un import dinamico
dentro de useEffect importamos la dependencia a modo de un metodo
import ('intersection-observer)

    useEffect(() => {
        import('intersection-observer')


este import devolvera una promesa. la promesa se resolvera cuando la dependencia este lista
al ser un polyfill lo que hace es parchear el objeto window por ellos no hay que preocuparse 
de devolver algo en la funcion then. O sea que cuando se recsuelva la promesa intersection observer
estara disponible de forma global

    const referencia = useRef(null)
    const [show,setShow] = useState(false)
    useEffect(() => {
        import('intersection-observer')
            .then(()=>{
                const observer = new window.IntersectionObserver(entry => {
                    const {isIntersecting} = entry[0]
                    isIntersecting && setShow(true)
                })
                observer.observe(referencia.current)
            })
    }, [referencia])

como se observa arriba, el codigo const observer =  new window.Intersection ... se encontrara dentro de la promesa





Pero que pasa si no necesitamos del polyfill?
entonces buscaremos que solo se utilice el polyfill si es que se necesitamos
para eso creamos un Promise y buscaremos que se resuelva
si el tipo de Interception observer es diferente a indefinido
o sea que existe entonces que ejecute window.Interception
en caso contrario que importe el polyfill intersection-observer
una vez terminada esa evaluacion que ejecute lo que esta dentro de .then

    useEffect(() => {
        Promise.resolve(
            typeof window.IntersectionObserver != 'undefined' 
            ? window.IntersectionObserver
            : import('intersection-observer') 
        ).then(()=>{
            const observer = new window.IntersectionObserver(entry => {
                const {isIntersecting} = entry[0]
                isIntersecting && setShow(true)
            })
            observer.observe(referencia.current)
        })
    }, [referencia])